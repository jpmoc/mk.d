_AWS_ECS_SERVICE_MK_VERSION= $(_AWS_ECS_MK_VERSION)

# ECS_SERVICE_ARN?= arn:aws:ecs:us-east-1:123456789012:service/my-http-service
# ECS_SERVICE_ARN_OR_NAME?=
# ECS_SERVICE_CLUSTER_ARN?=
# ECS_SERVICE_CLUSTER_ARN_OR_NAME?=
# ECS_SERVICE_CLUSTER_NAME?=
# ECS_SERVICE_CONFIG_FILEPATH?= ./service-config.json
ECS_SERVICE_INCLUDE?= TAGS
# ECS_SERVICE_LAUNCH_TYPE?= EC2
# ECS_SERVICE_NAME?= my-service
# ECS_SERVICE_TAGS_KEYVALUES?= key=string,value=string ...
# ECS_SERVICE_TASK_DEFINITION?=
# ECS_SERVICES_CLUSTER_ARN?=
# ECS_SERVICES_CLUSTER_ARN_OR_NAME?=
# ECS_SERVICES_CLUSTER_NAME?=
ECS_SERVICES_INCLUDE?= TAGS
# ECS_SERVICES_LAUNCH_TYPE?= FARGATE
# ECS_SERVICES_SCHEDULING_STRATEGY?= DAEMON
# ECS_SERVICES_NAMES?=
# ECS_SERVICES_SET_NAME?=

# Derived parameters
ECS_SERVICE_ARN_OR_NAME?= $(if $(ECS_SERVICE_ARN),$(ECS_SERVICE_ARN),$(ECS_SERVICE_NAME))
ECS_SERVICE_CLUSTER_ARN?= $(ECS_CLUSTER_ARN)
ECS_SERVICE_CLUSTER_ARN_OR_NAME?= $(if $(ECS_SERVICE_CLUSTER_ARN),$(ECS_SERVICE_CLUSTER_ARN),$(ECS_SERVICE_CLUSTER_NAME))
ECS_SERVICE_CLUSTER_NAME?= $(ECS_CLUSTER_NAME)
ECS_SERVICES_ARNS_OR_NAMES?= $(if $(ECS_SERVICES_ARN),$(ECS_SERVICES_ARNS),$(ECS_SERVICES_NAMES))
ECS_SERVICES_CLUSTER_ARN?= $(ECS_CLUSTER_ARN)
ECS_SERVICES_CLUSTER_ARN_OR_NAME?= $(if $(ECS_SERVICES_CLUSTER_ARN),$(ECS_SERVICES_CLUSTER_ARN),$(ECS_SERVICES_CLUSTER_NAME))
ECS_SERVICES_CLUSTER_NAME?= $(ECS_CLUSTER_NAME)

# Option parameters
__ECS_CLI_INPUT_JSON__SERVICE= $(if $(ECS_SERVICE_CONFIG_FILEPATH),file://$(ECS_SERVICES_CONFIG_FILEPATH))
__ECS_CLUSTER__SERVICE= $(if $(ECS_SERVICE_CLUSTER_ARN_OR_NAME),--cluster $(ECS_SERVICE_CLUSTER_ARN_OR_NAME))
__ECS_CLUSTER__SERVICES= $(if $(ECS_SERVICES_CLUSTER_ARN_OR_NAME),--cluster $(ECS_SERVICES_CLUSTER_ARN_OR_NAME))
__ECS_DEPLOYMENT_CONFIGURATION=
__ECS_DEPLOYMENT_CONTROLLER=
__ECS_DESIRED_COUNT=
__ECS_ENABLE_ECS_MANAGED_TASG=
__ECS_FORCE__SERVICE=
__ECS_FORCE_NEW_DEPLOYMENT=
__ECS_HEALTH_CHECK_GRACE_PERIOD_SECONDS=
__ECS_INCLUDE__SERVICE= $(if $(ECS_SERVICE_INCLUDE),--include $(ECS_SERVICE_INCLUDE))
__ECS_INCLUDE__SERVICES= $(if $(ECS_SERVICES_INCLUDE),--include $(ECS_SERVICES_INCLUDE))
__ECS_LAUNCH_TYPE__SERVICE= $(if $(ECS_SERVICE_LAUNCH_TYPE),--launch-type $(ECS_SERVICE_LAUNCH_TYPE))
__ECS_LAUNCH_TYPE__SERVICES= $(if $(ECS_SERVICES_LAUNCH_TYPE),--launch-type $(ECS_SERVICES_LAUNCH_TYPE))
__ECS_LOAD_BALANCERS=
__ECS_NETWORK_CONFIGURATION=
__ECS_PLACEMENT_CONSTRAINTS=
__ECS_PLACEMENT_STRATEGY=
__ECS_PLATFORM_VERSION=
__ECS_PROPAGATE_TAGS=
__ECS_ROLE__SERVICE=
__ECS_TAGS__SERVICE= $(if $(ECS_SERVICE_TAGS_KEYVALUES),--tags $(ECS_SERVICE_TAGS_KEYVALUES))
__ECS_SERVICE= $(if $(ECS_SERVICE_ARN_OR_NAME),--service-name $(ECS_SERVICE_ARN_OR_NAME))
__ECS_SERVICE_NAME= $(if $(ECS_SERVICE_NAME),--service-name $(ECS_SERVICE_NAME))
__ECS_SCHEDULING_STRATEGY= $(if $(ECS_SERVICES_SCHEDULING_STRATEGY),--scheduling-strategy $(ECS_SERVICES_SCHEDULING_STRATEGY))
__ECS_SERVICES__SERVICE= $(if $(ECS_SERVICE_NAME),--services $(ECS_SERVICE_NAME))
__ECS_SERVICES__SERVICES= $(if $(ECS_SERVICES_NAMES),--services $(ECS_SERVICES_NAMES))
__ECS_TASK_DEFINITION__SERVICE= $(if $(ECS_SERVICE_TASK_DEFINITION),--task-definition $(ECS_SERVICE_TASK_DEFINITION))

# UI parameters
ECS_UI_SHOW_SERVICE_FIELDS?=
ECS_UI_VIEW_SERVICES_FIELDS?=
ECS_UI_VIEW_SERVICES_SET_FIELDS?=
ECS_UI_VIEW_SERVICES_SET_QUERYFILTER?=

#--- Utilities

#--- Macros

#----------------------------------------------------------------------
# USAGE
#

_ecs_view_framework_macros ::
	@echo 'AWS::ECS::Service ($(_AWS_ECS_SERVICE_MK_VERSION)) macros:'
	@echo

_ecs_view_framework_parameters ::
	@echo 'AWS::ECS::Service ($(_AWS_ECS_SERVICE_MK_VERSION)) parameters:'
	@echo '    ECS_SERVICE_ARN=$(ECS_SERVICE_ARN)'
	@echo '    ECS_SERVICE_ARN_OR_NAME=$(ECS_SERVICE_ARN_OR_NAME)'
	@echo '    ECS_SERVICE_CLUSTER_ARN=$(ECS_SERVICE_CLUSTER_ARN)'
	@echo '    ECS_SERVICE_CLUSTER_ARN_OR_NAME=$(ECS_SERVICE_CLUSTER_ARN_OR_NAME)'
	@echo '    ECS_SERVICE_CLUSTER_NAME=$(ECS_SERVICE_CLUSTER_NAME)'
	@echo '    ECS_SERVICE_CONFIG_FILEPATH=$(ECS_SERVICE_CONFIG_FILEPATH)'
	@echo '    ECS_SERVICE_INCLUDE=$(ECS_SERVICE_INCLUDE)'
	@echo '    ECS_SERVICE_LAUNCH_TYPE=$(ECS_SERVICE_LAUNCH_TYPE)'
	@echo '    ECS_SERVICE_NAME=$(ECS_SERVICE_NAME)'
	@echo '    ECS_SERVICE_TAGS_KEYVALUES=$(ECS_SERVICE_TAGS_KEYVALUES)'
	@echo '    ECS_SERVICE_TASK_DEFINTION=$(ECS_SERVICE_TASK_DEFINITION)'
	@echo '    ECS_SERVICES_ARNS=$(ECS_SERVICES_ARNS)'
	@echo '    ECS_SERVICES_ARNS_OR_NAMES=$(ECS_SERVICES_ARNS_OR_NAMES)'
	@echo '    ECS_SERVICES_CLUSTER_ARN=$(ECS_SERVICES_CLUSTER_ARN)'
	@echo '    ECS_SERVICES_CLUSTER_ARN_OR_NAME=$(ECS_SERVICES_CLUSTER_ARN_OR_NAME)'
	@echo '    ECS_SERVICES_CLUSTER_NAME=$(ECS_SERVICES_CLUSTER_NAME)'
	@echo '    ECS_SERVICES_LAUNCH_TYPE=$(ECS_SERVICES_LAUNCH_TYPE)'
	@echo '    ECS_SERVICES_NAMES=$(ECS_SERVICES_NAMES)'
	@echo '    ECS_SERVICES_SCHEDULING_STRATEGY=$(ECS_SERVICES_SCHEDULING_STRATEGY)'
	@echo '    ECS_SERVICES_SET_NAME=$(ECS_SERVICES_SET_NAME)'
	@echo

_ecs_view_framework_targets ::
	@echo 'AWS::ECS::Service ($(_AWS_ECS_SERVICE_MK_VERSION)) targets:'
	@echo '    _ecs_create_service                  - Create a new service'
	@echo '    _ecs_delete_service                  - Delete an existing service'
	@echo '    _ecs_show_service                    - Show everything related to a service'
	@echo '    _ecs_show_service_description        - Show the description of a service'
	@echo '    _ecs_update_service                  - Update an existing service'
	@echo '    _ecs_view_services                   - View existing services'
	@echo '    _ecs_view_services_set               - View a set of services' 
	@echo

#----------------------------------------------------------------------
# PUBLIC_TARGETS
# 

_ecs_create_service:
	@$(INFO) '$(ECS_UI_LABEL)Creating a new service "$(ECS_SERVICE_NAME)" ...'; $(NORMAL)
	$(AWS) ecs create-service $(strip $(__ECS_CLI_INPUT_JSON__SERVICE) $(__ECS_CLIENT_TOKEN) $(__ECS_CLUSTER__SERVICE) $(__ECS_DEPLOYMENT_CONFIGURATION) $(__ECS_DEPLOYMENT_CONTROLLER) $(__ECS_DESIRED_COUNT) $(__ECS_ENABLE_ECS_MANAGED_TAGS) $(__ECS_HEALTH_CHECK_GRACE_PERDIO_SECONDS) $(__ECS_LAUNCH_TYPE) $(__ECS_LOAD_BALANCERS) $(__ECS_NETWORK_CONFIGURATION) $(__ECS_PLACEMENT_CONSTRAINTS) $(__PLACEMENT_STRATEGY) $(__ECS_PLATFORM_VERSION) $(__ECS_PROPAGATE_TAGS) $(__ECS_ROLE__SERVICE) $(__ECS_SCHEDULING_STRATEGY) $(__ECS_SERVICE_NAME) $(__ECS_SERVICE_REGISTRIES) $(__ECS_TAGS__SERVICE) $(__ECS_TASK_DEFINITION__SERVICE) )

_ecs_delete_service:
	@$(INFO) '$(ECS_UI_LABEL)Deleting an existing service "$(ECS_SERVICE_NAME)" ...'; $(NORMAL)
	$(AWS) ecs delete-service $(__ECS_CLUSTER__SERVICE) $(__ECS_FORCE__SERVICE) $(__ECS_SERVICE)

_ecs_show_service: _ecs_show_service_description

_ecs_show_service_description:
	@$(INFO) '$(ECS_UI_LABEL)Showing description of service "$(ECS_SERVICE_NAME)" ...'; $(NORMAL)
	$(AWS) ecs describe-services $(__ECS_CLUSTER__SERVICE) $(__ECS_SERVICES__SERVICE) $(__ECS_INCLUDE__SERVICE)

_ecs_update_service:
	@$(INFO) '$(ECS_UI_LABEL)Updating service "$(ECS_SERVICE_NAME)" ...'; $(NORMAL)
	$(AWS) update-service $(__ECS_CLUSTER__SERVICE) $(__ECS_DEPLOYMENT_CONFIGURATION) $(__ECS_DESIRED_COUNT) $(__ECS_FORCENEW_DEPLOYMENT) $(__ECS_HEALTH_CHECK_GRACE_PERIOD_SECONDS) $(__ECS_NETWORK_CONFIGURATION) $(__ECS_PLATFORM_VERSION) $(__ECS_SERVICE) $(__ECS_TASK_DEFINITION__SERVICE

_ecs_view_services:
	@$(INFO) '$(ECS_UI_LABEL)Viewing all services ...'; $(NORMAL)
	$(AWS) ecs list-services $(__ECS_CLUSTER__SERVICES) $(__ECS_LAUNCH_TYPE__SERVICES) $(__ECS_SCHEDULING_STRATEGY) # --query 'serviceArns[]$(ECS_UI_VIEW_SERVICES_FIELDS)'

_ecs_view_services_set:
	@$(INFO) '$(ECS_UI_LABEL)Viewing services-set "$(ECS_SERVICES_SET_NAME)" ...'; $(NORMAL)
	@$(WARN) 'Services are grouped based on the provided cluster, names, and optional query-filter'; $(NORMAL)
	$(AWS) ecs describe-services $(__ECS_CLUSTER__SERVICES) $(__ECS_SERVICES__SERVICES) $(__ECS_INCLUDE__SERVICES) # --query "services[$(ECS_UI_VIEW_SERVICES_SET_QUERYFILTER)]$(ECS_UI_VIEW_SERVICES_SET_FIELDS)"
